T1: ‚ú® ¬øC√≥mo dar formato de moneda a un n√∫mero en Javascript? 

![TIP] Una de las necesidades de personalizar/internacionalizar tu sitio web es por ejemplo mostrar valores monetarios en diferentes 

P: El objeto `Intl` provee una API rica en constructores que te permiten manipular como se muestra un contenido para casi todas tus necesidades.

P: Un requerimiento com√∫n es tener que mostrar n√∫meros en diferentes formatos, o valores monetarios, esto lo puedes lograr al utilizar `Intl.NumberFormat`.

[NOTE] Tambi√©n puedes formatear fechas, en este art√≠culo de muestro como

P: Los constructores provistos por la API Intl aceptan dos argumentos

P: üî∏ 1. el valor de `locale` o puesto en simple, el identificador del lenguaje que quieres utilizar
P: üî∏ 2. `options`: Un objeto que te permite definir diferentes opciones de formato.

P: Cada constructor expone a lo menos un m√©todo llamado `format` que recibe el valor al que quieres dar formato.

P: Un ejemplo de que puedes lograr con esta API, es convertir un valor a diferentes monedas.
				
Code:javascript
  function currencyFormatter(currency, value) {
    const formatter = new Intl.NumberFormat('en-US', {
      style: 'currency',
      minimumFractionDigits: 2,
      currency
    }) 
    return formatter.format(value)
  }

  const value = 123456

  const dollar = currencyFormatter("USD",value) //$123,456.00
  const pound = currencyFormatter("GBP", value) // ¬£123,456.00
  const peso =  currencyFormatter("CLP",value) // CLP 123,456.00
  const dinar = currencyFormatter("DZD",value) // DZD 123,456.00

					
				
P: En este ejemplo lo primero que encontrar√°s es la creaci√≥n de una funci√≥n.

P: Esta funci√≥n `currencyFormatter` acepta un objeto con dos atributos:

P: üìå `currency` que es un string con el c√≥digo de moneda que quieres utilizar
P: üìå `value` el valor num√©rico que quierres formatear.
P: Internamente la funci√≥n hace uso de `Intl.NumberFormat` con el lenguaje `en-US` y define las opciones de formato

P: üìå `style`: tiene el valor de "`currency`" para indicar que se mostrar√° en formato de moneda.
P: üìå `minimumFractionDigits`: define el todal minimo de digitos fraccionales (despu√©s del punto) que se mostrar√°n.
P: üìå `currency`: un string que identifica el c√≥digo de moneda requerido.
P: Como ves en el ejemplo, puedes transformar un valor (en este caso el n√∫mero `123456` ) a diferentes formatos de moneda.

P: Pero, esto puede ir m√°s all√°, el n√∫mero de opciones es bastante largo permitiendote definir diferentes partes del formato.


					
						
Code:typescript
  type Options = {
    compactDisplay?: "short" | "long"; // Only used when notation is "compact"
    currencyDisplay?: "symbol" | "narrowSymbol" | "code" | "name";
    currencySign?: "standard" | "accounting";
    localeMatcher?: "lookup" | "best fit";
    notation?: "standard" | "scientific" | "engineering" | "compact";
    numberingSystem?: 'arab' | 'arabext' | 'bali' | 'beng' | 'deva' | 'fullwide' | 'gujr' | 'guru' | 'hanidec' | 'khmr' | 'knda' | 'laoo' | 'latn' | 'limb' | 'mlym' | 'mong' | 'mymr' | 'orya' | 'tamldec' | 'telu' | 'thai' | 'tibt';
    signDisplay?: "auto" | "always" | "exceptZero" | "negative" | "never" ;
    style?: "decimal" | "currency" | "percent" | "unit";
    unit?: string;
    unitDisplay?: "long" | "short" | "narrow";
    useGrouping?: "always" | "auto" | boolean | "min2";
    roundingMode?: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | halfEven";
    roundingPriority?: "auto" | "morePrecision" | "lessPrecision";
    roundingIncrement?: 1 | 2 | 5 | 10 | 20 | 25 | 50 | 100 | 200 | 250 | 500 | 1000 | 2000 | 2500 | 5000;
    trailingZeroDisplay?: "auto" | "stripIfInteger";
    minimumIntegerDigits?: number;
    minimumFractionDigits?: number;
    maximumFractionDigits?: number;
    minimumSignificantDigits?: number;
    maximumSignificantDigits?: number;
  }
					
				
P: Adem√°s, si por alguna raz√≥n este set de opciones no cumple con lo que necesitas, puedes hacer uso de otro m√©todo expuesto por `NumberFormat`: `formatToParts`.

P: Este m√©todo retorna un arreglo de objetos que representan el valor num√©rico como string dividido en partes, as√≠ tu puedes manipular como desees el formato.


					
						
Code:typescript
  const formatToParts = new Intl.NumberFormat('en-US', {
    currency: 'USD',
    style: 'currency',
    minimumFractionDigits: 2
  }).formatToParts(value) 
  /* [
    { type: "currency", value: "$"},
    { type: "integer", value: "123" },
 +  { type: "group", value: "," },
    { type: "integer", value: "456" },
    { type: "decimal", value: "." },
    { type: "fraction", value: "00" }
  ] */

P: Pero no solo puedes dar formato de moneda a tus n√∫meros, tambi√©n puedes modificar la forma en que el n√∫mero se muestra.

Code:javascript
  function formatCompact(value) {
    const result = new Intl.NumberFormat(
      'en-US',
      { notation: "compact"}
    ).format(value)
    return result;
  }

  const res1 = formatCompact(123)     // 123
  const res2 = formatCompact(1234)    // 1.2K
  const res3 = formatCompact(12345)   // 12K
  const res4 = formatCompact(123456)  // 123K
  const res5 = formatCompact(1234567) // 1.2M
					
				
P: La forma compacta de un n√∫mero es un formato muy utilizado en redes sociales y otras aplicaciones web/m√≥viles ya que permite ‚Äúresumir‚Äù un valor sin perder su significancia y adem√°s que bastante bien en la interfaz.

P: Para este caso se utiliza la opci√≥n `notation` con el valor `compact` y Javascript har√° su magia.

T2: üòÉ Gracias por leer!
P: Te pareci√≥ interesante? Encuentra m√°s contenido similar uniendote al Newsletter o siguiendome en Twitter.

